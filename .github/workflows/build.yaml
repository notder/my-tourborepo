name: BUILD
 
on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]

jobs:
  setup-tests:
    name: Setup Tests
    runs-on: ubuntu-latest
    outputs:
      test-chunks: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
      test-chunk-ids: ${{ steps['set-test-chunk-ids'].outputs['test-chunk-ids'] }}
    env:
      TESTS_NUM_CHUNKS: 3
    steps:
      - id: set-test-chunks
        run: |
          ./scripts/generate-chunks.mjs
          chunks=$(cat ./test-results/chunks.json)
          echo "::set-output name=test-chunks::$(echo $chunks)"
      - name: Set Test Chunk IDs
        id: set-test-chunk-ids
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
        run: echo "::set-output name=test-chunk-ids::$(echo $CHUNKS | jq -cM 'to_entries | map(.key)')"

  tests:
    name: Tests (Chunk ${{ matrix.chunk }})
    runs-on: ubuntu-latest
    needs: [setup-tests]
    strategy:
      fail-fast: false
      matrix:
        chunk: ${{ fromJson(needs.preflight.outputs['test-chunk-ids']) }}
    if: needs.setup-tests.result == 'success'
    steps:
      # This takes the current chunk from the chunk array, prepends each entry
      # with a turbo filter and executes turbo with the series of filters for
      # each package in the chunk.
      - name: Run Test Suite
        id: test-suite
        env:
          CHUNKS: ${{ needs.preflight.outputs['test-chunks'] }}
          TURBO_CONCURRENCY: 3
          JEST_MAX_WORKERS: 3
        run: echo $CHUNKS | jq '.[${{ matrix.chunk }}] | map(. |= "--filter=\(.)") | .[]' | xargs yarn test --continue
        continue-on-error: true

      - name: Aggregate Timings
        run: yarn jest-timings ${{ matrix.chunk }}

      - name: Upload Timings
        run: |
          # Upload timing report for this chunk e.g `timings_${{ matrix.chunk }}.json``
      - name: Upload Test Reports
        run: |
          # upload all test results for each package e.g `packages/*/test-results/**`